generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        String    @id @default(cuid())
  name      String
  phone     String    @unique
  address   String
  city      String
  state     String
  country   String
  pincode   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  users     User[]    @relation()
  students  Student[]
  teachers  Teacher[]
  parents   Parent[]
  libraries Library[]
  hostels   Hostel[]
  transports Transport[]
  accounts  Account[]


  SchoolPaymentGateway SchoolPaymentGateway[]

  // Class Class[]
}

// User Models are defined here
model User {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  phone              String
  profilePic         String?
  password           String?
  address            String?
  city               String?
  state              String?
  country            String?
  pincode            String?
  role               Role                 @default(superadmin)
  schoolId           String?
  school             School?              @relation(fields: [schoolId], references: [id])
  students           Student[]
  PasswordResetToken PasswordResetToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  teachers           Teacher[]
  parents            Parent[]
  libraries          Library[]
  hostels            Hostel[]
  transports         Transport[]
  accounts           Account[]

 
}

enum Role {
  superadmin
  admin
  teacher
  student
  parent
  library
  hostel
  transport
  account
}




model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

// School Addmin user models

model Student {
  id        String   @id @default(cuid())

 
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Fee Fee[]

  // Result Result[]

  // Attendance Attendance[]
}

model Teacher {
  id        String   @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Class Class[]

  // Subject Subject[]

  // Lesson Lesson[]
}

model Parent {
  id        String   @id @default(cuid())
  
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Library {
  id        String   @id @default(cuid())
 
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Hostel {
  id        String   @id @default(cuid())
 
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Transport {
  id        String   @id @default(cuid())
 
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id        String   @id @default(cuid())
 
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}



model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}









































































































































model SchoolPaymentGateway {
  id           String   @id @default(cuid())
  schoolId     String   @unique
  stripeApiKey String?
  razorpayKey  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  school       School   @relation(fields: [schoolId], references: [id])
}



model Fee {
  id        String   @id @default(cuid())
  studentId String
  amount    Float
  status    String   @default("pending") // "paid", "partial", or "pending"
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // student   Student  @relation(fields: [studentId], references: [id])
}







































































































































































































// Teacher Routes here manage class, attendence, assignment, exam, grade, leaderboard

// model Class {

//   id          String    @id @default(cuid())
//   name        String
//   description String?
//   schoolId    String
//   capacity    String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @default(now()) @updatedAt

//   school      School    @relation(fields: [schoolId], references: [id])
//   teachers    Teacher[]
//   subjects    Subject[]
  

//   Lesson Lesson[]
// }

// model Subject {
//   id       String    @id @default(cuid())
//   name     String
//   classId  String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @default(now()) @updatedAt

//   class    Class     @relation(fields: [classId], references: [id])
//   teachers Teacher[]
//   lessons  Lesson[]
// }

// model Lesson {
//   id        String   @id @default(cuid())
//   name      String
//   day       String
//   startTime DateTime
//   endTime   DateTime
//   subjectId String
//   classId   String
//   teacherId String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   subject     Subject      @relation(fields: [subjectId], references: [id])
//   class       Class        @relation(fields: [classId], references: [id])
//   teacher     Teacher      @relation(fields: [teacherId], references: [id])
//   exams       Exam[]
//   assignments Assignment[]
//   attendances Attendance[]
// }

// model Assignment {
//   id        String   @id @default(cuid())
//   title     String
//   startDate DateTime
//   dueDate   DateTime
//   lessonId  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   lesson     Lesson   @relation(fields: [lessonId], references: [id])
//   results    Result[]
// }

// model Attendance {
//   id        String   @id @default(cuid())
//   lessonId  String
//   studentId String
//   status    String   @default("absent") // "present", "absent", "late"
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   lesson     Lesson   @relation(fields: [lessonId], references: [id])
//   student    Student  @relation(fields: [studentId], references: [id])
// }



// model Exam {
//   id        String   @id @default(cuid())
//   title     String
//   startTime DateTime
//   endTime   DateTime
//   lessonId  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   lesson     Lesson   @relation(fields: [lessonId], references: [id])
//   results    Result[]
// }

// model Result {
//   id           String   @id @default(cuid())
//   score        Int
//   examId       String?
//   assignmentId String?
//   studentId    String
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @default(now()) @updatedAt

//   exam         Exam?       @relation(fields: [examId], references: [id])
//   assignment   Assignment? @relation(fields: [assignmentId], references: [id])
//   student      Student     @relation(fields: [studentId], references: [id])
// }
// enum AttendanceStatus {
//   PRESENT
//   ABSENT
//   LATE
// }

// enum Weekday {
//   MONDAY
//   TUESDAY
//   WEDNESDAY
//   THURSDAY
//   FRIDAY
//   SATURDAY
//   SUNDAY
// }