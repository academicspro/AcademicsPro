generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id         String      @id @default(cuid())
  name       String
  phone      String      @unique
  address    String
  city       String
  state      String
  country    String
  pincode    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  users      User[]      @relation()
  students   Student[]
  teachers   Teacher[]
  parents    Parent[]
  libraries  Library[]
  hostels    Hostel[]
  transports Transport[]
  accounts   Account[]
}

// User Models are defined here
model User {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  phone              String
  profilePic         String?
  password           String?
  address            String?
  city               String?
  state              String?
  country            String?
  pincode            String?
  bloodType          String?
  sex                UserSex
  role               Role                 @default(superadmin)
  schoolId           String?
  school             School?              @relation(fields: [schoolId], references: [id])
  students           Student[]
  PasswordResetToken PasswordResetToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  teachers           Teacher[]
  parents            Parent[]
  libraries          Library[]
  hostels            Hostel[]
  transports         Transport[]
  accounts           Account[]
}

enum Role {
  superadmin
  admin
  teacher
  student
  parent
  library
  hostel
  transport
  account
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

// School Addmin user models

model Student {
  id        String @id @default(cuid())


  schoolId    String
  userId      String?
  parentId    String
  birthday    DateTime
  parent      Parent       @relation(fields: [parentId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Teacher {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  students  Student[]
}

model Library {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Hostel {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Transport {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
