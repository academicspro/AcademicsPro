generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id         String      @id @default(cuid())
  name       String
  phone      String      @unique
  address    String
  city       String
  state      String
  country    String
  pincode    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  users      User[]      @relation()
  students   Student[]
  teachers   Teacher[]
  parents    Parent[]
  libraries  Library[]
  hostels    Hostel[]
  transports Transport[]
  accounts   Account[]
}

// User Models are defined here
model User {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique
  phone      String
  profilePic String?
  password   String?
  address    String?
  city       String?
  state      String?
  country    String?
  pincode    String?

  role               Role                 @default(superadmin)
  schoolId           String?
  school             School?              @relation(fields: [schoolId], references: [id])
  students           Student[]
  PasswordResetToken PasswordResetToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  teachers           Teacher[]
  parents            Parent[]
  libraries          Library[]
  hostels            Hostel[]
  transports         Transport[]
  accounts           Account[]
}

enum Role {
  superadmin
  admin
  teacher
  student
  parent
  library
  hostel
  transport
  account
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

// School Addmin user models

model Student {
  id        String @id @default(cuid())
  bloodType String

  schoolId  String
  userId    String?
  parentId  String
  parent    Parent   @relation(fields: [parentId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Teacher {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  birthday DateTime @default("2000-01-01T00:00:00.000Z")
}

model Parent {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  students  Student[]
}

model Library {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Hostel {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Transport {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
