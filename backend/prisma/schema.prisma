generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// <--------------------V1 Start------------------------->

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

model plan {
  id           String   @id @default(cuid())
  name         String // Basic , Pro , Enterprise
  price        Float
  durationDays Int // 7,15,30
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  subscription subscription[]
}

model subscription {
  id        String   @id @default(cuid())
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  planId    String
  plan      plan     @relation(fields: [planId], references: [id])
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model School {
  id            String         @id @default(cuid())
  name          String   
  email         String          @unique    
  phone         String
  address       String
  city          String
  state         String
  password      String?
  country       String
  pincode       String
  role          Role           @default(admin)
  profilePic    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  users         User[]         @relation()
  students      Student[]
  teachers      Teacher[]
  parents       Parent[]
  libraries     Library[]
  hostels       Hostel[]
  transports    Transport[]
  accounts      Account[]
  subscription  subscription[]
  fees          Fee[]
  paymentSecret PaymentSecret?
}

model PaymentSecret {
  id        String       @id @default(cuid())
  schoolId  String   @unique
  school    School   @relation(fields: [schoolId], references: [id])
  keyId     String
  keySecret String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// User Models are defined here
model User {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  phone              String
  profilePic         String?
  password           String?
  address            String?
  city               String?
  state              String?
  country            String?
  pincode            String?
  bloodType          String?
  sex                UserSex?
  role               Role                 @default(superadmin)
  schoolId           String?
  school             School?              @relation(fields: [schoolId], references: [id])
  students           Student[]
  PasswordResetToken PasswordResetToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  teacherId          String?
  studentId          String?
  parentId           String?
  libraryId          String?
  hostelId           String?
  transportId        String?
  accountId          String?
  teachers           Teacher[]
  parents            Parent[]
  libraries          Library[]
  hostels            Hostel[]
  transports         Transport[]
  accounts           Account[]
}

// School Addmin user models

model Student {
  id          String       @id @default(cuid())
  schoolId    String
  userId      String?
  user        User?        @relation(fields: [userId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  attendances Attendance[]
  results     Result[]
  Grade       Grade[]
  parent      Parent[]
  fees        Fee[]
  payments    Payment[]
}

model Fee {
  id         String    @id @default(cuid())
  studentId  String
  student    Student   @relation(fields: [studentId], references: [id])
  amount     Float
  dueDate    DateTime
  finePerDay Float     @default(0)
  status     String    @default("Pending") // Pending , Partial, PAID , Overdue
  Payment    Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  School School[]
}

model Payment {
  id                String   @id @default(cuid())
  feeId             String
  fee               Fee      @relation(fields: [feeId], references: [id])
  amount            Float
  razorpayOrderId   String @unique
  razorpayPaymentId String?
  status            String   @default("Pending") // Pending , PAID, Failed
  paymentDate       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  Student Student[]
}

model Notification {
  id        String   @id @default(cuid())
  feeId     String
  type      String // Reminder , Overdue
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
}

model Teacher {
  id        String    @id @default(cuid())
  schoolId  String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id @default(cuid())
  schoolId  String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  students  Student[]
}

model Library {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Hostel {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Transport {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id String @id @default(cuid())

  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Grade {
  id        String  @id @default(cuid())
  level     Int     @unique
  studentId String
  students  Student @relation(fields: [studentId], references: [id])
  classess  Class[]
}

model Class {
  id       String @id @default(cuid())
  name     String @unique
  capacity Int

  teacherId     String?
  teacher       Teacher?       @relation(fields: [teacherId], references: [id])
  lessons       Lesson[]
  students      Student[]
  grade         Grade[]
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       String    @id @default(cuid())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        String   @id @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId String
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        String   @id @default(cuid())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           String      @id @default(cuid())
  score        Int
  examId       String?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String   @id @default(cuid())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  superadmin
  admin
  teacher
  student
  parent
  library
  hostel
  transport
  account
}


// doubt forums
// competitions
// leaderboard
// Roadmap Creation
// Todo List
// PYQ With Soultion
// goverment Exams
// chat room
// white board
// zoom meeting call
// student chat with teacher
// teacher chat with parent
// Self enhacement -> quiz , Newspaper reading 
// download reports 
// notification

// <--------------------V1 Completed------------------------->

// <--------------------V2 Start------------------------->

// <--------------------V2 Completed------------------------->

// <--------------------V3 Start------------------------->

// <--------------------V3 Completed------------------------->
